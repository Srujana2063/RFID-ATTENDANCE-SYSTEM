Here is the code without the numbering:

```cpp
// Including the libraries.
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <SPI.h>
#include <MFRC522.h>
#include <WiFi.h>
#include <HTTPClient.h>
#include <vector>

#define SS_PIN 5
#define RST_PIN 4
#define BTN_PIN 15

const char* ssid = "Atchyuth Kalla";
const char* password = "00000000";

void http_Req(String str_modes, String str_uid);
String getValue(String data, char separator, int index);
int getUID();
void byteArray_to_string(byte array[], unsigned int len, char buffer[]);

String Web_App_URL = "https://script.google.com/macros/s/AKfycbyktSZdylSqJACPWeeeKbWfeBbXgXmpkMPmyH7wQJD1h5NPNOe2Ht_0rpC76OxJ9sA3oA/exec";

String reg_Info = "";
String atc_Info = "";
String atc_Name = "";
String atc_Date = "";
String atc_Time_In = "";
String atc_Time_Out = "";

int lcdColumns = 16;
int lcdRows = 2;

int readsuccess;
char str[32] = "";
String UID_Result = "	";
String modes = "atc";

LiquidCrystal_I2C lcd(0x27, lcdColumns, lcdRows);
MFRC522 mfrc522(SS_PIN, RST_PIN);

void setup() {
    Serial.begin(115200);
    Serial.println();
    delay(1000);

    pinMode(BTN_PIN, INPUT_PULLUP);

    lcd.init();
    lcd.backlight();

    lcd.clear();

    delay(500);

    SPI.begin();
    mfrc522.PCD_Init();

    delay(500);

    lcd.setCursor( 0, 0);
    lcd.print("Google Sheets");
    lcd.setCursor( 0, 1);
    lcd.print("AttendanceSystem");

    delay(3000);
    lcd.clear();

    Serial.println();
    Serial.println("	");
    Serial.println("WIFI mode : STA");
    WiFi.mode(WIFI_STA);
    Serial.println("	");

    Serial.println();
    Serial.println("	");
    Serial.print("Connecting to ");
    Serial.println(ssid);
    WiFi.begin(ssid, password);

    int connecting_process_timed_out = 20;
    connecting_process_timed_out = connecting_process_timed_out * 2;
    while (WiFi.status() != WL_CONNECTED) {
        Serial.print(".");
        lcd.setCursor( 0, 0);
        lcd.print("Connecting WIFI");
        delay(250);
        lcd.clear();
        delay(250);

        if (connecting_process_timed_out > 0) connecting_process_timed_out--;
        if (connecting_process_timed_out == 0) {
            delay(1000);
            ESP.restart();
        }
    }

    Serial.println();
    Serial.println("WiFi connected");
    Serial.println("	");

    lcd.clear();
    lcd.setCursor( 0, 0);
    lcd.print("WiFi connected");
    delay(2000);
    lcd.clear();
    delay(500);
}

void loop() {
    int BTN_State = digitalRead(BTN_PIN);
    if (BTN_State == LOW) {
        lcd.clear();
        if (modes == "atc") {
            modes = "reg";
        } else if (modes == "reg") {
            modes = "atc";
        }
        delay(500);
    }

    readsuccess = getUID();
    if (modes == "atc") {
        lcd.setCursor(0, 0);
        lcd.print("ATTENDANCE");

        lcd.setCursor( 0, 1);
        lcd.print("Please tap card");

        if (readsuccess) {
            lcd.clear();
            delay(500);
            lcd.setCursor( 0, 0);
            lcd.print("Getting UID");
            lcd.setCursor( 0, 1);
            lcd.print("Successfully");
            delay(1000);

            http_Req(modes, UID_Result);
        }
    }

    if (modes == "reg") {
        lcd.setCursor( 0, 0);
        lcd.print("REGISTRATION");
        lcd.setCursor( 0, 1);
        lcd.print("Tap your card");

        if (readsuccess) {
            lcd.clear();
            delay(500);
            lcd.setCursor( 0, 0);
            lcd.print("Getting UID");
            lcd.setCursor( 0, 1);
            lcd.print("Successfully");

            delay(1000);

            http_Req(modes, UID_Result);
        }
    }

    delay(10);
}

void http_Req(String str_modes, String str_uid) {
    if (WiFi.status() == WL_CONNECTED) {
        String http_req_url = Web_App_URL + "?sts=" + str_modes + "&uid=" + str_uid;

        Serial.println();
        Serial.println("	");
        Serial.println("Sending request to Google Sheets	");
        Serial.print("URL : ");
        Serial.println(http_req_url);

        HTTPClient http;
        http.begin(http_req_url);

        int httpCode = http.GET();
        Serial.print("HTTP Status Code : ");
        Serial.println(httpCode);

        String payload;
        if (httpCode == 30) {
            String newUrl = http.header("Location");
            Serial.println("Redirecting to: " + newUrl);

            http.end(); // close current connection

            // follow the redirect
            http.begin(newUrl);
            httpCode = http.GET();
        }

        lcd.clear();
        delay(500);

        lcd.setCursor( 0, 0);

        lcd.print("IN: ");
        lcd.print(atc_Time_In);
        lcd.setCursor( 0, 1);
        lcd.print("OUT: ");
        if (atc_Info == "TO_Successful")	{
            lcd.print(atc_Time_Out);
        }
        delay(5000);
        lcd.clear();
        delay(500);
    } else if (atc_Info == "atcInf01")	{
        lcd.clear();
        delay(500);
        lcd.setCursor( 0, 0);
        lcd.print("Attendance");
        lcd.setCursor( 0, 1);
        lcd.print("Completed");
        delay(5000);
        lcd.clear();
        delay(500);
    } else if (atc_Info == "atcErr01")	{
        lcd.clear();
        delay(500);
        lcd.setCursor( 0, 0);
        lcd.print("Error!");
        lcd.setCursor( 8, 0);
        lcd.print("Card not");

        lcd.setCursor( 0, 1);
        lcd.print("registered");
        delay(5000);
        lcd.clear();
        delay(500);
    }

    atc_Info = "";
    atc_Name = "";
    atc_Date = "";
    atc_Time_In = "";
    atc_Time_Out = "";

    if (str_modes == "reg") {
        reg_Info = getValue(payload, ',', 1);

        if (reg_Info == "R_Successful") {
            lcd.clear();
            delay(500);
            lcd.setCursor( 0, 0);
            lcd.print("Registration");
            lcd.setCursor( 0, 1);
            lcd.print("Successful");
            delay(5000);
            lcd.clear();
            delay(500);
        } else if (reg_Info == "regErr01") {
            lcd.clear();
            delay(500);
            lcd.setCursor( 0, 0);
            lcd.print("Error!");
            lcd.setCursor( 8, 0);
            lcd.print("Already");
            lcd.setCursor( 0, 1);
            lcd.print("Registered");
            delay(5000);
            lcd.clear();
            delay(500);
        }

        reg_Info = "";
    }
} else {
    lcd.clear();
    delay(500);
    lcd.setCursor( 0, 0);
    lcd.print("Error!");
    lcd.setCursor( 0, 1);
    lcd.print("WiFi disconnected");
    delay(3000);
    lcd.clear();
    delay(500);
}
}

String getValue(String data, char separator, int index) {
    int found = 0;
    int strIndex[] = { 0, -1 };
    int maxIndex = data.length() - 1;

    for (int i = 0; i <= maxIndex && found <= index; i++) {
        if (data.charAt(i) == separator || i == maxIndex) {
            found++;
            strIndex[0] = strIndex[1] + 1;
            strIndex[1] = (i == maxIndex) ? i + 1 : i;
        }
    }

    return found > index ? data.substring(strIndex[0], strIndex[1]) : "";
}

void byteArray_to_string(byte array[], unsigned int len, char buffer[]) {
    for (unsigned int i = 0; i < len; i++) {
        byte nib1 = (array[i] >> 4) & 0x0F;
        byte nib2 = (array[i] >> 0) & 0x0F;
        buffer[i * 2 + 0] = nib1 < 0xA ? '0' + nib1 : 'A' + nib1 - 0xA;
        buffer[i * 2 + 1] = nib2 < 0xA ? '0' + nib2 : 'A' + nib2 - 0xA;
    }
    buffer[len * 2] = '\0
